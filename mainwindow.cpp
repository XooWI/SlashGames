#include "mainwindow.h"
#include "./ui_mainwindow.h"

#include <QDateTime>
#include <QMessageBox>


#include <QDebug>
#include <QProcess>

MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent),
      ui(new Ui::MainWindow),
      bonusTimer(new QTimer(this)),
      settings(new QSettings("SlashGames", "Menu", this))
{
    ui->setupUi(this);
    toolMenu = new QMenu(this);

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    loadTheme();
    loadBalance();
    checkBonusAvailability();

    connect(bonusTimer, &QTimer::timeout, this, &MainWindow::updateBonusTimer);

    ui->supportLabel->setText("–ù–µ—Ç –Ω—É–∂–Ω–æ–π –∏–≥—Ä—ã? "
                              "<a href='https://t.me/SlashGames_support_bot' style='color: #2a7ae9; text-decoration: none;'>"
                              "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º!");
    ui->supportLabel->setOpenExternalLinks(true);
}


void MainWindow::loadBalance()
{
    balance = settings->value("balance", 0).toInt();
    ui->balanceLabel->setText(QLocale(QLocale::English).toString(balance).replace(",", " ") + "üí≤");
}


void MainWindow::loadTheme()
{
    isDarkTheme = settings->value("darkTheme", false).toBool();
    applyTheme(isDarkTheme);
}


void MainWindow::on_FaQButton_clicked()
{
    FAQWindow faqWindow(this);
    faqWindow.exec();
}


void MainWindow::on_themeButton_clicked()
{
    applyTheme(!isDarkTheme);
}

void MainWindow::on_getBonusButton_clicked()
{
    balance += BONUS_AMOUNT;
    saveBalance();
    showBalanceChange(BONUS_AMOUNT);

    settings->setValue("lastBonusTime", QDateTime::currentDateTime());
    startBonusReload(BONUS_RELOAD);
}

void MainWindow::on_addGameButton_clicked()
{

    GameInputDialog gameInputDialog(this);
    if (gameInputDialog.exec() != QDialog::Accepted) {
        return; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –≤–≤–æ–¥
    }

    QString gameName = gameInputDialog.getName();
    QString iconPath = gameInputDialog.getIconPath();
    QString executablePath = gameInputDialog.getExecutablePath();

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É –∏–≥—Ä—ã
    QPushButton *newGameButton = new QPushButton(ui->gamesContainer);
    newGameButton->setMinimumSize(QSize(400, 300));
    newGameButton->setMaximumSize(QSize(600, 300));
    newGameButton->setCursor(Qt::PointingHandCursor);


    newGameButton->setStyleSheet(CustomStyle::getCustomNewButton().arg(iconPath));
    newGameButton->setText(gameName);

    newGameButton->setContextMenuPolicy(Qt::CustomContextMenu);
    connect(newGameButton, &QPushButton::customContextMenuRequested, [this, newGameButton](const QPoint&){
        QPoint centerPos = newGameButton->rect().center();
        QPoint globalPos = newGameButton->mapToGlobal(centerPos);
        QString gameName = newGameButton->property("gameName").toString();
        gameButtonRight_clicked(gameName, globalPos);
    });

    // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏
    int row = gameCount / 2;  // –£—á–∏—Ç—ã–≤–∞–µ–º 2 —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏–≥—Ä—ã
    int column = gameCount % 2;

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É –≤ —Å–µ—Ç–∫—É
    ui->gamesGridLayout->addWidget(newGameButton, row, column);
    gameCount++;

    // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫—É "+" –≤ —Å–ª–µ–¥—É—é—â—É—é –ø–æ–∑–∏—Ü–∏—é
    ui->gamesGridLayout->removeWidget(ui->addGameButton);
    int newRow = gameCount / 2;
    int newCol = gameCount % 2;
    ui->gamesGridLayout->addWidget(ui->addGameButton, newRow, newCol);

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
    connect(newGameButton, &QPushButton::clicked, [executablePath]() {QProcess::startDetached(executablePath);});

}



void MainWindow::gameButtonRight_clicked(const QString& gameName, const QPoint& globalPos)
{
    QMenu menu(this);

    QAction* editAction = menu.addAction("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å");
    connect(editAction, &QAction::triggered, this, &MainWindow::menuGameEdit_clicked);

    QAction* deleteAction = menu.addAction("–£–¥–∞–ª–∏—Ç—å");
    connect(deleteAction, &QAction::triggered, this, &MainWindow::menuGameDelete_clicked);

    menu.exec(globalPos);
}


void MainWindow::menuProfile_clicked()
{
       AuthorizationWindow authWindow(this);
       authWindow.exec();
}

void MainWindow::menuGameEdit_clicked()
{
    qDebug() << "Press edit game button";
}

void MainWindow::menuGameDelete_clicked()
{
    qDebug() << "Press delete game button";
}

void MainWindow::menuEdit_clicked()
{
    qDebug() << "Press edit button";
}

void MainWindow::menuExit_clicked()
{
    QMessageBox::StandardButton reply;
    reply = QMessageBox::question(this, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                                "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?",
                                QMessageBox::Yes | QMessageBox::No);

    if (reply == QMessageBox::Yes) {
        qApp->quit();
    }
}

void MainWindow::on_rouletteButton_clicked()
{
    QMessageBox::information(this, "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...", "–ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä—É–ª–µ—Ç–∫–∏");
}


void MainWindow::on_slotsButton_clicked()
{
    QMessageBox::information(this, "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...", "–ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–ª–æ—Ç–æ–≤");
}


void MainWindow::applyTheme(bool darkTheme)
{
    isDarkTheme = darkTheme;
    QString themeIconPath, faqIconPath, accountIconPath, myProfileIconPath, editProfileIconPath;
    toolMenu->clear();

    if (isDarkTheme) {
        setStyleSheet(CustomStyle::getDarkThemeStyle());

        themeIconPath = ":/resources/theme_for_dark.png";
        faqIconPath = ":/resources/faq_for_dark.png";
        accountIconPath = ":/resources/user_for_dark.png";
        myProfileIconPath = ":/resources/my_profile_for_dark.png";
        editProfileIconPath = ":/resources/edit_for_dark.png";
    } else {
        setStyleSheet(CustomStyle::getLightThemeStyle());

        themeIconPath = ":/resources/theme_for_light.png";
        faqIconPath = ":/resources/faq_for_light.png";
        accountIconPath = ":/resources/user_for_light.png";
        myProfileIconPath = ":/resources/my_profile_for_light.png";
        editProfileIconPath = ":/resources/edit_for_light.png";
    }

    ui->themeButton->setIcon(QIcon(themeIconPath));
    ui->FaQButton->setIcon(QIcon(faqIconPath));
    ui->accountButton->setIcon(QIcon(accountIconPath));

    // –ú–µ–Ω—é –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
    QAction *profileAction = toolMenu->addAction(QIcon(myProfileIconPath), "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å");
    connect(profileAction, &QAction::triggered, this, &MainWindow::menuProfile_clicked);
    QAction *editAction = toolMenu->addAction(QIcon(editProfileIconPath), "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å");
    connect(editAction, &QAction::triggered, this, &MainWindow::menuEdit_clicked);
    QAction *exitAction = toolMenu->addAction(QIcon(":/resources/exit.png"), "–í—ã—Ö–æ–¥");
    connect(exitAction, &QAction::triggered, this, &MainWindow::menuExit_clicked);
    ui->accountButton->setMenu(toolMenu);

    settings->setValue("darkTheme", isDarkTheme);
}


void MainWindow::saveBalance()
{
    settings->setValue("balance", balance);
    ui->balanceLabel->setText(QLocale(QLocale::English).toString(balance).replace(",", " ") + "üí≤");
}


void MainWindow::showBalanceChange(int amount)
{
    QString text, color;

        if (amount > 0) {
            text = QString("+%1").arg(QLocale(QLocale::English).toString(amount).replace(",", " "));
            color = "#4CAF50";
        } else {
            text = QString("%1").arg(QLocale(QLocale::English).toString(amount).replace(",", " "));
            color = "#f44336";
        }

        ui->balanceChangeLabel->setText(text);
        ui->balanceChangeLabel->setStyleSheet(QString("color: %1;").arg(color));

        // –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        QTimer::singleShot(2000, this, [this]() {
                if (ui && ui->balanceChangeLabel) {
                    ui->balanceChangeLabel->setText("");
                    ui->balanceChangeLabel->setStyleSheet("");
                }
        });
}


void MainWindow::checkBonusAvailability()
{
    QDateTime lastBonusTime = settings->value("lastBonusTime").toDateTime();

    if (lastBonusTime.isValid()) {
        // –í—ã—á–∏—Å–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –ø—Ä–æ—à–ª–æ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞
        int secondsPassed = lastBonusTime.secsTo(QDateTime::currentDateTime());

        // –í—ã—á–∏—Å–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–æ–Ω—É—Å–∞
        int remainingSeconds = BONUS_RELOAD - secondsPassed;

        if (remainingSeconds > 0) {
            startBonusReload(remainingSeconds);
            return;
        }
    }

    enableBonusButton();
}

void MainWindow::startBonusReload(int seconds)
{
    remainingSeconds = seconds;
    bonusTimer->start(1000);
    updateBonusButtonAppearance();
}


void MainWindow::updateBonusTimer()
{
    if (--remainingSeconds <= 0) {
        enableBonusButton();
        return;
    }

    updateBonusButtonAppearance();
}


// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –∫–Ω–æ–ø–∫–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
void MainWindow::updateBonusButtonAppearance()
{
    double progress = qBound(0.0, (double)(BONUS_RELOAD - remainingSeconds) / BONUS_RELOAD, 1.0);

    int hours = remainingSeconds / 3600;
    int minutes = (remainingSeconds % 3600) / 60;
    int seconds = remainingSeconds % 60;
    QString timeText = QString("%1:%2:%3")
        .arg(hours, 2, 10, QChar('0'))
        .arg(minutes, 2, 10, QChar('0'))
        .arg(seconds, 2, 10, QChar('0'));

    QString style = QString(CustomStyle::getActionBonusButtonStyle()).arg(progress).arg(progress + 0.01);

    ui->getBonusButton->setText(timeText);
    ui->getBonusButton->setStyleSheet(style);
    ui->getBonusButton->setEnabled(false);
}


void MainWindow::enableBonusButton()
{
    bonusTimer->stop();
    ui->getBonusButton->setText("–ü–æ–ª—É—á–∏—Ç—å –ë–æ–Ω—É—Å!");
    ui->getBonusButton->setEnabled(true);

    ui->getBonusButton->setStyleSheet(CustomStyle::getEnableBonusButtonStyle());
}


MainWindow::~MainWindow()
{
    delete ui;
}



