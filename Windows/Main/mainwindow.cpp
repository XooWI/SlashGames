#include "mainwindow.h"
#include "./ui_mainwindow.h"

MainWindow::MainWindow(QWidget *parent)
        : QMainWindow(parent),
        ui(new Ui::MainWindow),
        bonusTimer(new QTimer(this)),
        tokenCheckTimer(new QTimer(this)),
        settings(new QSettings(QSettings::IniFormat,  QSettings::UserScope, "SlashGames", "Menu", this)),
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ C:\Users\<NAME_USER>\AppData\Roaming\SlashGames\Menu.ini
        // –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä settings(new QSettings("SlashGames", "Menu", this))

      dbManager(new DatabaseManagement(settings)),
      toolMenu(new QMenu(this)) // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è toolMenu
{
    ui->setupUi(this);
    gameManager = new GameManager(settings, ui->gamesGridLayout, ui->addGameButton, this);

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    qDebug() << "Install token timer";
    if (dbManager->checkToken()) {
            QDateTime expiryTime = dbManager->getTokenExpiryTime();
            qint64 timeToExpiry = QDateTime::currentDateTime().msecsTo(expiryTime);
            tokenCheckTimer->setInterval(timeToExpiry);
            tokenCheckTimer->start();
            qDebug() << "–¢–∞–π–º–µ—Ä –≤—ã—Ö–æ–¥–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥) –∑–∞–ø—É—â–µ–Ω. –°—Ä–∞–±–æ—Ç–∞–µ—Ç –≤:" << expiryTime.toString(Qt::ISODate);
            updateAccountButtonState();

    } else {
        qDebug() << "Install token timer –¢–æ–∫–µ–Ω–∞ –Ω–µ—Ç";
        updateAccountButtonState(); // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–ì–æ—Å—Ç—å", –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ –æ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
        }

    loadBalance();
    loadTheme();
    checkBonusAvailability();
    gameManager->refreshGamesLayout();

    connect(bonusTimer, &QTimer::timeout, this, &MainWindow::updateBonusTimer);
    connect(tokenCheckTimer, &QTimer::timeout, this, &MainWindow::checkAndUpdateAccountState);

    ui->supportLabel->setText(CustomStyle::getTextSupportLabel());
    ui->supportLabel->setOpenExternalLinks(true);

}


void MainWindow::checkAndUpdateAccountState()
{
    QDateTime expiryTime = dbManager->getTokenExpiryTime();
    if (expiryTime.isValid() && QDateTime::currentDateTime() >= expiryTime) {
        logoutAccount();
        CustomWindow General(CustomWindow::GeneralInfo, "–í—Ä–µ–º—è –≤–∞—à–µ–≥–æ —Å–µ–∞–Ω—Å–∞ –∏—Å—Ç–µ–∫–ª–æ!\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–Ω–æ–≤–æ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è.","–°–µ–∞–Ω—Å –∏—Å—Ç–µ–∫!", this);
        General.exec();
    } else if (!dbManager->checkToken()) {
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω —Å—Ç–∞–ª –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –ø–æ –¥—Ä—É–≥–æ–π –ø—Ä–∏—á–∏–Ω–µ
        logoutAccount();
        QMessageBox::information(this, "–°–µ–∞–Ω—Å –∏—Å—Ç–µ–∫2", "–í–∞—à —Å–µ–∞–Ω—Å –∏—Å—Ç–µ–∫. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–Ω–æ–≤–æ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è.");
            } else {
                updateAccountButtonState();
            }
}



void MainWindow::updateAccountButtonState() {
    qDebug() << "updateAccountButtonState checkToken";
    if (dbManager->checkToken()) {
        disconnect(ui->accountButton, &QPushButton::clicked, this, &MainWindow::openAuthorizationWindow);
        ui->accountButton->setMenu(toolMenu);
        ui->usernameLabel->setText(dbManager->getUsername());
        return;
    }
    ui->accountButton->setMenu(nullptr); // –£–¥–∞–ª—è–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ –º–µ–Ω—é
    connect(ui->accountButton, &QPushButton::clicked, this, &MainWindow::openAuthorizationWindow); // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª clicked
}


void MainWindow::logoutAccount()
{
    qDebug() << "logoutAccount –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞";
    settings->setValue("ID", "");
    settings->setValue("balance", 0);
    ui->usernameLabel->setText("–ì–æ—Å—Ç—å");
    loadBalance();
    updateAccountButtonState();
    if (tokenCheckTimer->isActive()) {
        tokenCheckTimer->stop();
        qDebug() << "logoutAccount –¢–∞–π–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ.";
    }
}


void MainWindow::loadBalance()
{
    qDebug() << "Balance checkToken";
    if (dbManager->checkToken()){
        settings->setValue("balance", dbManager->getBalance());
        qDebug() << "You login! Username: " << dbManager->getUsername() << " Balance from DB:"<<dbManager->getBalance();
    } else{ui->usernameLabel->setText("–ì–æ—Å—Ç—å");}
    balance = settings->value("balance", 0).toInt();
    ui->balanceLabel->setText(QLocale(QLocale::English).toString(balance).replace(",", " ") + "üí≤");
}


void MainWindow::loadTheme()
{
    isDarkTheme = settings->value("darkTheme", false).toBool();
    applyTheme(isDarkTheme);
}


void MainWindow::saveBalance()
{
    settings->setValue("balance", balance);
    qDebug() << "saveBalance checkToken";

    if (dbManager->checkToken()){
        if (dbManager->updateBalance(balance)){
            qDebug() << "Update balance from DB";
        } else{
            qDebug() << "Error update balance from DB";
        }
    }
    ui->balanceLabel->setText(QLocale(QLocale::English).toString(balance).replace(",", " ") + "üí≤");
}

void MainWindow::on_addGameButton_clicked() // –î–æ–±–∞–≤–∏–ª–∏ GameManager::
{
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º m_mainWindowParent –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–æ–¥–∏—Ç–µ–ª—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
    GameInputDialog gameInputDialog(false, this);
    if (gameInputDialog.exec() != QDialog::Accepted) {
        return;
    }

    QString gameName = gameInputDialog.getName();
    QString iconPath = gameInputDialog.getIconPath();
    QString executablePath = gameInputDialog.getFilePath();

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
    gameManager->saveGame(gameName, iconPath, executablePath);
    gameManager->refreshGamesLayout();
}


void MainWindow::showBalanceChange(int amount)
{
    QString text, color;

        if (amount > 0) {
            text = QString("+%1").arg(QLocale(QLocale::English).toString(amount).replace(",", " "));
            color = "#4CAF50";
        } else {
            text = QString("%1").arg(QLocale(QLocale::English).toString(amount).replace(",", " "));
            color = "#f44336";
        }

        ui->balanceChangeLabel->setText(text);
        ui->balanceChangeLabel->setStyleSheet(QString("color: %1;").arg(color));

        // –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        QTimer::singleShot(2000, this, [this]() {
                if (ui && ui->balanceChangeLabel) {
                    ui->balanceChangeLabel->setText("");
                    ui->balanceChangeLabel->setStyleSheet("");
                }
        });
}


void MainWindow::checkBonusAvailability()
{
    QDateTime lastBonusTime = settings->value("lastBonusTime").toDateTime();

    if (lastBonusTime.isValid()) {
        // –í—ã—á–∏—Å–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –ø—Ä–æ—à–ª–æ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞
        int secondsPassed = lastBonusTime.secsTo(QDateTime::currentDateTime());

        // –í—ã—á–∏—Å–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–æ–Ω—É—Å–∞
        int remainingSeconds = BONUS_RELOAD - secondsPassed;

        if (remainingSeconds > 0) {
            startBonusReload(remainingSeconds);
            return;
        }
    }

    enableBonusButton();
}

void MainWindow::startBonusReload(int seconds)
{
    remainingSeconds = seconds;
    bonusTimer->start(1000);
    updateBonusButtonAppearance();
}


void MainWindow::updateBonusTimer()
{
    if (--remainingSeconds <= 0) {
        enableBonusButton();
        return;
    }

    updateBonusButtonAppearance();
}


// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –∫–Ω–æ–ø–∫–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
void MainWindow::updateBonusButtonAppearance()
{
    double progress = qBound(0.0, (double)(BONUS_RELOAD - remainingSeconds) / BONUS_RELOAD, 1.0);

    int hours = remainingSeconds / 3600;
    int minutes = (remainingSeconds % 3600) / 60;
    int seconds = remainingSeconds % 60;
    QString timeText = QString("%1:%2:%3")
        .arg(hours, 2, 10, QChar('0'))
        .arg(minutes, 2, 10, QChar('0'))
        .arg(seconds, 2, 10, QChar('0'));

    QString style = QString(CustomStyle::getActionBonusButtonStyle()).arg(progress).arg(progress + 0.01);

    ui->getBonusButton->setText(timeText);
    ui->getBonusButton->setStyleSheet(style);
    ui->getBonusButton->setEnabled(false);
}


void MainWindow::enableBonusButton()
{
    bonusTimer->stop();
    ui->getBonusButton->setText("–ü–æ–ª—É—á–∏—Ç—å –ë–æ–Ω—É—Å!");
    ui->getBonusButton->setEnabled(true);

    ui->getBonusButton->setStyleSheet(CustomStyle::getEnableBonusButtonStyle());
}


void MainWindow::on_getBonusButton_clicked()
{
    loadBalance();
    balance += BONUS_AMOUNT;
    saveBalance();
    showBalanceChange(BONUS_AMOUNT);

    settings->setValue("lastBonusTime", QDateTime::currentDateTime());
    startBonusReload(BONUS_RELOAD);
}



// –ö–Ω–æ–ø–∫–∏ –∏ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—å
void MainWindow::showMenuProfileInfo_clicked()
{
    qDebug() << "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.";
    CustomWindow General(CustomWindow::GeneralInfo, "–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!", dbManager->getUsername(), this);
    General.exec();
}


void MainWindow::menuEditProfile_clicked()
{
    qDebug() << "You enter button menu edit!";
    CustomWindow UserInfo(CustomWindow::UserInfo, "You edit!",QString(), this);
    UserInfo.exec();
    return;
}

void MainWindow::menuExitProfile_clicked()
{
    qDebug() << "menuExitProfile checkToken";
    QMessageBox::StandardButton reply;
    reply = QMessageBox::question(this, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                                "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?\n–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω!",
                                QMessageBox::Yes | QMessageBox::No);

    if (reply == QMessageBox::Yes) {
        logoutAccount();
        qDebug() << "You exit from profile ";
    }
}


void MainWindow::on_rouletteButton_clicked()
{
    QMessageBox::information(this, "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...", "–ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä—É–ª–µ—Ç–∫–∏");
}


void MainWindow::on_slotsButton_clicked()
{
    QMessageBox::information(this, "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...", "–ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–ª–æ—Ç–æ–≤");
}


void MainWindow::handleLoginSuccessful()
{
    updateAccountButtonState();

    loadBalance();
    QDateTime expiryTime = dbManager->getTokenExpiryTime();
        if (expiryTime.isValid()) {
            QDateTime currentTime = QDateTime::currentDateTime();
            if (expiryTime > currentTime) {
                qint64 timeToExpiry = currentTime.msecsTo(expiryTime);
                tokenCheckTimer->setInterval(timeToExpiry);
                tokenCheckTimer->start();
                qDebug() << "handleLoginSuccessful –¢–∞–π–º–µ—Ä –≤—ã—Ö–æ–¥–∞ –∑–∞–ø—É—â–µ–Ω. –°—Ä–∞–±–æ—Ç–∞–µ—Ç –≤:" << expiryTime.toString(Qt::ISODate);
            } else {
                qDebug() << "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ —É–∂–µ –∏—Å—Ç–µ–∫ –ø—Ä–∏ –≤—Ö–æ–¥–µ.";
                logoutAccount();
                QMessageBox::information(this, "–°–µ–∞–Ω—Å –∏—Å—Ç–µ–∫", "–í—Ä–µ–º—è –≤–∞—à–µ–≥–æ —Å–µ–∞–Ω—Å–∞ –∏—Å—Ç–µ–∫–ª–æ. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–Ω–æ–≤–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.");
            }
        } else {
            qDebug() << "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞.";
            tokenCheckTimer->start(TOKEN_CHECK_INTERVAL * 1000);
        }
    CustomWindow UserInfo(CustomWindow::UserInfo, "–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!", dbManager->getUsername(), this);
    UserInfo.exec();
}


void MainWindow::applyTheme(bool darkTheme)
{
    isDarkTheme = darkTheme;
    QString themeIconPath, faqIconPath, accountButtonIconPath, myProfileIconPath, editProfileIconPath, exitIconPath;

    if (isDarkTheme) {
        setStyleSheet(CustomStyle::getDarkThemeStyle());

        themeIconPath = ":/icons/dark_mode/button_toggle_theme.png";
        faqIconPath = ":/icons/dark_mode/button_faq.png";
        accountButtonIconPath = ":/icons/dark_mode/button_profile.png";
        myProfileIconPath = ":/icons/dark_mode/menu_my_profile.png";
        editProfileIconPath = ":/icons/dark_mode/menu_edit.png";
        exitIconPath = ":/icons/universal/menu_exit.png";
    } else {
        setStyleSheet(CustomStyle::getLightThemeStyle());

        themeIconPath = ":/icons/light_mode/button_toggle_theme.png";
        faqIconPath = ":/icons/light_mode/button_faq.png";
        accountButtonIconPath = ":/icons/light_mode/button_profile.png";
        myProfileIconPath = ":/icons/light_mode/menu_my_profile.png";
        editProfileIconPath = ":/icons/light_mode/menu_edit.png";
        exitIconPath = ":/icons/universal/menu_exit.png";
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ –∫–Ω–æ–ø–æ–∫
    ui->themeButton->setIcon(QIcon(themeIconPath));
    ui->FaQButton->setIcon(QIcon(faqIconPath));
    ui->accountButton->setIcon(QIcon(accountButtonIconPath)); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏

    if (!toolMenu) {
            toolMenu = new QMenu(this);
        } else {
            toolMenu->clear();
        }

        // –°–æ–∑–¥–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è –º–µ–Ω—é –∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –∏–º –∏–∫–æ–Ω–∫–∏
        QAction *profileAction = toolMenu->addAction(QIcon(myProfileIconPath), "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å");
        connect(profileAction, &QAction::triggered, this, &MainWindow::showMenuProfileInfo_clicked);

        QAction *editAction = toolMenu->addAction(QIcon(editProfileIconPath), "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å");
        connect(editAction, &QAction::triggered, this, &MainWindow::menuEditProfile_clicked);

        QAction *exitAction = toolMenu->addAction(QIcon(exitIconPath), "–í—ã—Ö–æ–¥");
        connect(exitAction, &QAction::triggered, this, &MainWindow::menuExitProfile_clicked);


    settings->setValue("darkTheme", isDarkTheme);
}


void MainWindow::openAuthorizationWindow()
{
    AuthorizationWindow authWindow(settings, dbManager, this);
    connect(&authWindow, &AuthorizationWindow::loginSuccessful, this, &MainWindow::handleLoginSuccessful);
    authWindow.exec();
}


void MainWindow::on_FaQButton_clicked()
{
    FAQWindow faqWindow(this);
    faqWindow.exec();
}


void MainWindow::on_themeButton_clicked()
{
    applyTheme(!isDarkTheme);
}


MainWindow::~MainWindow()
{
    if (tokenCheckTimer->isActive()) {
        tokenCheckTimer->stop();
    }
    delete ui;
    delete dbManager;
}




