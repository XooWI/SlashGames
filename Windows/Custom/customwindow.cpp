#include "customwindow.h"
#include "ui_customwindow.h"

CustomWindow::CustomWindow(WindowType type, const QString& mainText, const QString& windowTitle, QWidget *parent, DatabaseManagement *dbManager)
    : QDialog(parent),
      ui(new Ui::CustomWindow),
      dbManager(dbManager)
{
    ui->setupUi(this);

    // –û—Ç–∫–ª—é—á–∞–µ–º –∑–Ω–∞–∫ –≤–æ–ø—Ä–æ—Å–∞ & Qt::WindowTitleHint
    setWindowFlags(windowFlags() & ~Qt::WindowContextHelpButtonHint);
    setupWindow(type, mainText, windowTitle);
}

CustomWindow::~CustomWindow()
{
    delete ui;
}

void CustomWindow::setupWindow(WindowType type, const QString& mainText, const QString& windowTitle)
{
    QLabel* contentLabel = findChild<QLabel*>("gameNameLabel");
    QPushButton* acceptButton = findChild<QPushButton*>("acceptButton");
    QPushButton* cancelButton = findChild<QPushButton*>("cancelButton");
    QPushButton* contunieButton = findChild<QPushButton*>("contunieButton");

    QLineEdit* nameLineEdit = findChild<QLineEdit*>("nameLineEdit");
    QLineEdit* oldPasswordLineEdit = findChild<QLineEdit*>("oldPasswordLineEdit");
    QLineEdit* newPasswordLineEdit = findChild<QLineEdit*>("newPasswordLineEdit");
    QLineEdit* confirmNewPasswordLineEdit = findChild<QLineEdit*>("confirmNewPasswordLineEdit");

    if (!contentLabel || !acceptButton || !cancelButton || !contunieButton || !nameLineEdit || !oldPasswordLineEdit || !newPasswordLineEdit || !confirmNewPasswordLineEdit) {
        return;
    }

    acceptButton->hide();
    cancelButton->hide();
    contunieButton->hide();
    nameLineEdit->hide();
    oldPasswordLineEdit->hide();
    newPasswordLineEdit->hide();
    confirmNewPasswordLineEdit->hide();

    switch (type) {
        case ConfirmationDeleteGame:
            setWindowTitle("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è");
            contentLabel->setText(QString("–£–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É '%1'?").arg(mainText));
            acceptButton->setText("–£–¥–∞–ª–∏—Ç—å");
            cancelButton->setText("–û—Ç–º–µ–Ω–∞");
            acceptButton->show();
            cancelButton->show();
            break;

        case UserInfo: {
            setWindowTitle("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ");
            QStringList userInfoParts = mainText.split(',');
            if (userInfoParts.size() >= 4) {
                QString name = userInfoParts.at(0);
                QString balance = QLocale(QLocale::English).toString(userInfoParts.at(1).toInt()).replace(",", " ") + "üí≤";
                QDate registrationDate = QDate::fromString(userInfoParts.at(2), "yyyy-MM-dd");
                QDateTime tokenExpiryDateTime = QDateTime::fromString(userInfoParts.at(3), Qt::ISODate);

                long long daysRemaining = QDate::currentDate().daysTo(tokenExpiryDateTime.date());

                QString daysRemainingText = "<span style='color: red;'>(-)</span>";
                QString tokenDateColorStyle = "color: red;";

                if (daysRemaining > 0) {
                    daysRemainingText = QString("<span style='color: #4CAF50;'>(%1 –¥–Ω.)</span>").arg(daysRemaining);
                    tokenDateColorStyle = "color: #4CAF50;";
                } else if (daysRemaining == 0) {
                    daysRemainingText = "<span style='color: orange;'>(—Å–µ–≥–æ–¥–Ω—è)</span>";
                    tokenDateColorStyle = "color: orange;";
                }

            contentLabel->setText(CustomStyle::userInfoText().arg(
                                  name,
                                  balance,
                                  registrationDate.toString("dd.MM.yyyy"),
                                  tokenExpiryDateTime.toString("dd.MM.yyyy"),
                                  daysRemainingText,
                                  tokenDateColorStyle));
            } else {
                contentLabel->setText("–û—à–∏–±–∫–∞");
            }
            contunieButton->setText("–û–ö");
            contunieButton->show();
            break;
        }

        case GeneralInfo:
            if (!windowTitle.isEmpty()) {
                setWindowTitle(windowTitle);
            } else {
                setWindowTitle("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è");
            }
            contentLabel->setText(mainText);
            contunieButton->setText("–û–ö");
            contunieButton->show();
            break;

        case Confirmation:
            if (!windowTitle.isEmpty()) {
                setWindowTitle(windowTitle);
            } else {
                setWindowTitle("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ");
            }
            contentLabel->setText(mainText);
            acceptButton->setText("–î–∞");
            cancelButton->setText("–ù–µ—Ç");
            acceptButton->show();
            cancelButton->show();
            break;

    case ConfirmationPay:
        if (!windowTitle.isEmpty()) {
            setWindowTitle(windowTitle);
        } else {
            setWindowTitle("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ");
        }
        contentLabel->setText(mainText);
        acceptButton->setText("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å");
        cancelButton->setText("–û—Ç–º–µ–Ω–∞");
        acceptButton->setStyleSheet("QPushButton#acceptButton {background-color: #4CAF50;}QPushButton#acceptButton:hover {background-color: #45a049;}");
        cancelButton->setStyleSheet("QPushButton#cancelButton {background-color: #f44336;}QPushButton#cancelButton:hover {background-color: #b71c1c;}");
        acceptButton->show();
        cancelButton->show();
        break;

    case EditProfile: {
        setWindowTitle("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è");

        ui->nameLineEdit->show();
        ui->oldPasswordLineEdit->show();
        ui->newPasswordLineEdit->show();
        ui->confirmNewPasswordLineEdit->show();

        contentLabel->setText("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ");
        contentLabel->setStyleSheet("font-size: 30px;");
        ui->oldPasswordLineEdit->setFocus();

        ui->nameLineEdit->setStyleSheet("");
        ui->oldPasswordLineEdit->setStyleSheet("");
        ui->newPasswordLineEdit->setStyleSheet("");
        ui->confirmNewPasswordLineEdit->setStyleSheet("");

        ui->nameLineEdit->setText(dbManager->getUsername());

        ui->acceptButton->setText("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å");
        ui->acceptButton->setStyleSheet("QPushButton#acceptButton {background-color: #4CAF50;}QPushButton#acceptButton:hover {background-color: #45a049;}");
        ui->cancelButton->setText("–û—Ç–º–µ–Ω–∞");
        ui->cancelButton->setStyleSheet("QPushButton#cancelButton {background-color: #f44336;}QPushButton#cancelButton:hover {background-color: #b71c1c;}");
        ui->acceptButton->show();
        ui->cancelButton->show();


        disconnect(ui->acceptButton, &QPushButton::clicked, nullptr, nullptr);
        connect(ui->acceptButton, &QPushButton::clicked, this, [this]() {
            QString newName = ui->nameLineEdit->text().trimmed();
            QString oldPassword = ui->oldPasswordLineEdit->text();
            QString newPassword = ui->newPasswordLineEdit->text();
            QString confirmNewPassword = ui->confirmNewPasswordLineEdit->text();

            // –°–±—Ä–æ—Å —Å—Ç–∏–ª–µ–π –æ—à–∏–±–æ–∫
            ui->nameLineEdit->setStyleSheet("");
            ui->oldPasswordLineEdit->setStyleSheet("");
            ui->newPasswordLineEdit->setStyleSheet("");
            ui->confirmNewPasswordLineEdit->setStyleSheet("");

            bool hasError = false;
            QString errorMessage = "";

            if (newName.isEmpty()) {
                ui->nameLineEdit->setStyleSheet("border: 1px solid red;");
                errorMessage += "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.\n";
                hasError = true;
            }

            if (oldPassword.isEmpty()) {
                ui->oldPasswordLineEdit->setStyleSheet("border: 1px solid red;");
                errorMessage += "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å.\n";
                hasError = true;
            }

            if (!newPassword.isEmpty() && newPassword != confirmNewPassword) {
                ui->newPasswordLineEdit->setStyleSheet("border: 1px solid red;");
                ui->confirmNewPasswordLineEdit->setStyleSheet("border: 1px solid red;");
                errorMessage += "–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç.\n";
                hasError = true;
            }

            if (!newPassword.isEmpty() && dbManager->password_strength(newPassword) != 0) {
                ui->newPasswordLineEdit->setStyleSheet("border: 1px solid red;");
                errorMessage += "–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º —Å–ª–∞–±—ã–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –±—É–∫–≤, —Ü–∏—Ñ—Ä –∏ —Å–∏–º–≤–æ–ª–æ–≤.\n";
                hasError = true;
            }

            if (!newPassword.isEmpty() && newPassword==oldPassword) {
                ui->newPasswordLineEdit->setStyleSheet("border: 1px solid red;");
                errorMessage += "–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å–æ —Å—Ç–∞—Ä—ã–º\n";
                hasError = true;
            }

            if (hasError) {
                CustomWindow errorDialog(CustomWindow::GeneralInfo, errorMessage.trimmed(), "–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞", this);
                errorDialog.exec();
                return;
            }

            if (!(dbManager->checkPassword(oldPassword))) {
                ui->oldPasswordLineEdit->setStyleSheet("border: 1px solid red;");
                CustomWindow errorDialog(CustomWindow::GeneralInfo, "–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å.", "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", this);
                errorDialog.exec();
                return;
            }

            bool updateSuccess = true;
            bool changesMade = false;

            if (newName != dbManager->getUsername()) {
                if (dbManager->updateUsername(newName)) {
                    changesMade = true;
                } else {
                    CustomWindow errorDialog(CustomWindow::GeneralInfo, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", this); // –í–æ–∑–º–æ–∂–Ω–æ, CustomWindow::Error
                    errorDialog.exec();
                    updateSuccess = false;
                }
            }

            if (!newPassword.isEmpty() && updateSuccess) {
                if (dbManager->updatePassword(newPassword)) {
                    changesMade = true;
                } else {
                    CustomWindow errorDialog(CustomWindow::GeneralInfo, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å.", "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", this);
                    errorDialog.exec();
                    updateSuccess = false;
                }
            }

            if (updateSuccess && changesMade) {
                CustomWindow infoDialog(CustomWindow::GeneralInfo, "–î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.", "–£—Å–ø–µ—Ö", this);
                infoDialog.exec();
                QDialog::accept();
            } else if (!changesMade && updateSuccess) {
                CustomWindow infoDialog(CustomWindow::GeneralInfo, "–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", this);
                infoDialog.exec();
            }

        });

        connect(ui->cancelButton, &QPushButton::clicked, this, &CustomWindow::on_cancelButton_clicked, Qt::UniqueConnection); // –¢–∞–∫–∂–µ —Å UniqueConnection
        break;
    }

        default:
            contentLabel->setText("–û—à–∏–±–∫–∞: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–∫–Ω–∞.");
            contunieButton->setText("–û–ö");
            contunieButton->show();
            setWindowTitle("–û—à–∏–±–∫–∞");
            break;
    }

    // –ü–µ—Ä–µ—Ä–∞—Å—á–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
    adjustSize();
    setFixedSize(sizeHint());
}

void CustomWindow::on_acceptButton_clicked()
{
    QDialog::accept();
}

void CustomWindow::on_cancelButton_clicked()
{
    QDialog::reject();
}

void CustomWindow::on_contunieButton_clicked()
{
    QDialog::accept();
}

